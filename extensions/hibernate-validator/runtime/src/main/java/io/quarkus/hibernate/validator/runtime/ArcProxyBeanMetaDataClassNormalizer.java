package io.quarkus.hibernate.validator.runtime;

import org.hibernate.validator.metadata.BeanMetaDataClassNormalizer;

import io.quarkus.arc.ClientProxy;
import io.quarkus.arc.Subclass;

/**
 * In the case of a proxy generated by Arc, return the parent class.
 * <br />
 * This can have more than one level of hierarchy, for example:
 * <ul>
 * <li>When using @{@link io.quarkus.test.junit.mockito.InjectMock} or @{@link io.quarkus.test.junit.mockito.InjectSpy}</li>
 * </ul>
 */
public class ArcProxyBeanMetaDataClassNormalizer implements BeanMetaDataClassNormalizer {

    private static final String CDI_WRAPPER_SUFFIX = "$$CDIWrapper";

    @SuppressWarnings("unchecked")
    @Override
    public <T> Class<? super T> normalize(Class<T> beanClass) {
        Class<? super T> targetClass = beanClass;
        while (Subclass.class.isAssignableFrom(targetClass)) {
            targetClass = targetClass.getSuperclass();
        }
        while (ClientProxy.class.isAssignableFrom(targetClass)) {
            targetClass = targetClass.getSuperclass();
        }
        if (beanClass.isSynthetic() && beanClass.getSimpleName().endsWith(CDI_WRAPPER_SUFFIX)) {
            String nameToFind = beanClass.getName().substring(0, beanClass.getName().length() - (CDI_WRAPPER_SUFFIX.length()));
            for (Class<?> anInterface : targetClass.getInterfaces()) {
                if (nameToFind.equals(anInterface.getName())) {
                    return (Class<? super T>) anInterface;
                }
            }
        }
        return targetClass;
    }

}
